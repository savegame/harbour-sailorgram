#include <QtQuick>
#include <sailfishapp.h>
#include <autogenerated/telegramqml.h>
#include "dbus/screenblank.h"
#include "selector/audiorecorder.h"
#include "selector/thumbnailprovider.h"
#include "selector/filesmodel.h"
#include "model/dialogscovermodel.h"
#include "core.h"
#include "defines.h"

int main(int argc, char *argv[])
{
    QScopedPointer<QGuiApplication> application(SailfishApp::application(argc, argv));
    application->setApplicationName(APP_NAME);
    application->setApplicationVersion(APP_VERSION);
    application->addLibraryPath(QString("%1/../share/%2/lib").arg(qApp->applicationDirPath(), qApp->applicationName()));

    QDBusConnection sessionbus = QDBusConnection::sessionBus();

    if(sessionbus.interface()->isServiceRegistered(DBUS_INTERFACE)) // Only a Single Instance is allowed
    {
        qWarning() << "Service " DBUS_INTERFACE " already registered";

//        DBusInterface::sendWakeUp();

//        if(application->hasPendingEvents())
//            application->processEvents();

//        return 0;
    }

    FilesModel::registerMetaTypes();
    TelegramQml::initialize(QML_INTERFACE("LibQTelegram"));

    qmlRegisterType<Core>(QML_INTERFACE("Core"), 1, 0, "Core");
    qmlRegisterType<ScreenBlank>(QML_INTERFACE("DBus"), 1, 0, "ScreenBlank");
    qmlRegisterType<AudioRecorder>(QML_INTERFACE("Selector"), 1, 0, "AudioRecorder");
    qmlRegisterType<FilesModel>(QML_INTERFACE("FilesModel"), 1, 0, "FilesModel");
    qmlRegisterType<DialogsCoverModel>(QML_INTERFACE("Model"), 1, 0, "DialogsCoverModel");
    qmlRegisterType<TranslationInfoItem>(QML_INTERFACE("Model"), 1, 0, "TranslationItem");

    QScopedPointer<QQuickView> view(SailfishApp::createView());
    QQmlEngine* engine = view->engine();
    QObject::connect(engine, SIGNAL(quit()), application.data(), SLOT(quit()));
    engine->addImageProvider(QStringLiteral("thumbnail"), new ThumbnailProvider);

    view->setSource(SailfishApp::pathTo("qml/main.qml"));
    view->show();

    return application->exec();
}
